"""
Django settings for dashboard project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import boto3
import json
import base64
from botocore.exceptions import ClientError

from django.core.management.utils import get_random_secret_key

from dashboard.vars import *

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR      = Path(__file__).resolve().parent.parent

ADMIN_ENABLED = True
DEBUG         = True

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_random_secret_key()

#SECURE_SSL_REDIRECT = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

#ALLOWED_HOSTS=['127.0.0.1', 'localhost', dashboard_domain]
ALLOWED_HOSTS=['*']

# AUTHENTICATION_BACKENDS = (
#     'django_auth_adfs.backend.AdfsAuthCodeBackend',
# )

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django_auth_adfs',
    'admin.tools',
    'events',
    'report.users',
    'report.securitygroups',
    'report.accounts',
    'report.amis',
    'menu.home',
    'healthcheck',
]

# Client secret is not public information. Should store it as an environment variable.
################################################################################################
# Retrieve Azure SSO Client Secrets
################################################################################################
# secretsmanager = boto3.client('secretsmanager', region_name='us-east-1')
# secret_name = f'{project_name}-dashboard-azure-sso-secrets'
# try:
#     response = secretsmanager.get_secret_value(SecretId=secret_name)
#     secrets = json.loads(response['SecretString'])
#     tenant_id = secrets['tenant_id']
#     client_id = secrets['client_id']
#     client_secret = secrets['client_secret']
# except Exception as e:
#     print(f'Cloud not get secret \'{secret_name}\'. Exiting...')
#     print(f'API Response: {response}')
#     print(e)
#     exit(1)

# secret_name = f'{project_name}-dashboard-db-creds'
# try:
#     response = secretsmanager.get_secret_value(SecretId=secret_name)
#     if 'SecretString' in response:
#         database_secret = response['SecretString']
# except Exception as e:
#     print(f'Cloud not get secret \'{secret_name}\'. Exiting...')
#     print(f'API Response: {response}')
#     print(e)
#     exit(1)

# secret_name = f'{project_name}-dashboard-django-secretkey'
# try:
#     response = secretsmanager.get_secret_value(SecretId=secret_name)
#     if 'SecretString' in response:
#         SECRET_KEY = response['SecretString']
# except Exception as e:
#     print(f'Cloud not get secret \'{secret_name}\'. Exiting...')
#     print(f'API Response: {response}')
#     print(e)
#     exit(1)
################################################################################################


# AUTH_ADFS = {
#     'AUDIENCE': client_id,
#     'CLIENT_ID': client_id,
#     'CLIENT_SECRET': client_secret,
#     'CLAIM_MAPPING': {'first_name': 'given_name',
#                       'last_name': 'family_name',
#                       'email': 'upn'},
#     'GROUPS_CLAIM': 'groups',
#     'MIRROR_GROUPS': False,
#     'USERNAME_CLAIM': 'upn',
#     'TENANT_ID': tenant_id,
#     'RELYING_PARTY_ID': client_id,
#     "LOGIN_EXEMPT_URLS": ["healthcheck/"],
#     "CREATE_NEW_USERS": False,
# }

# Configure django to redirect users to the right SSO URL for login
# LOGIN_URL = "django_auth_adfs:login"
# LOGIN_REDIRECT_URL = "/"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'django_auth_adfs.middleware.LoginRequiredMiddleware',
]

CUSTOM_FAILED_RESPONSE_VIEW = 'dot.path.to.custom.views.login_failed'

ROOT_URLCONF = 'dashboard.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'admin/tools/templates'),
                 os.path.join(BASE_DIR, 'events/templates'),
                 os.path.join(BASE_DIR, 'report/users/templates'),
                 os.path.join(BASE_DIR, 'report/securitygroups/templates'),
                 os.path.join(BASE_DIR, 'report/accounts/templates'),
                 os.path.join(BASE_DIR, 'report/amis/templates'),
                 os.path.join(BASE_DIR, 'menu/home/templates'),
                 os.path.join(BASE_DIR, 'dashboard/errors'),
                 os.path.join(BASE_DIR, 'dashboard/base')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dashboard.wsgi.application'


#Database
#https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'dashboard',
#         'USER': 'dashboard',
#         'PASSWORD': database_secret,
#         'HOST': 'dashboard.cluster-xxxxxxxxxxxx.us-east-1.rds.amazonaws.com',
#         'PORT': '3306',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
STATIC_URL = f'https://{static_files_domain}/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
